
#line 2 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[658] =
    {   0,
        0,    0,    0,    0,   20,   18,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       16,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   15,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
       15,    0,    0,   14,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    9,    0,
        2,    0,    0,    0,    0,    0,    0,    7,    0,    0,

        4,    3,   11,    0,   10,    0,   12,    0,    0,    0,
        0,    0,    7,    0,    0,    4,    3,   11,    0,   10,
        0,    0,    5,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    6,   13,    0,    0,    0,    0,    0,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,

        0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    6,    5,    5,    7,    5,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    5,    5,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   14,   14,   18,   19,   20,   21,   22,
       14,   23,   24,   25,   14,   14,   14,   14,   26,   14,
        5,    1,    5,    5,    5,    1,   14,   14,   14,   27,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[28] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[762] =
    {   0,
        0,    0,   27,    0, 1270, 1944, 1944, 1944,   52,   53,
       54,   56,   59,   58, 1266,   61,   62,   63,   66, 1246,
     1239,   67,   92,  102,   61,   67,   71, 1225,   68,   76,
       88,   99, 1944, 1208,  110, 1944, 1206,  106,  109,  111,
      112,  114,  118, 1205,  120,  119,  124,  126, 1209, 1185,
     1178,  132,  140, 1174,  133,  139,  146,  147,  149,  150,
      159,  156,  167,  169,  170,  173,  152,  182, 1141, 1140,
     1135, 1944, 1144, 1944, 1122, 1102, 1111, 1092, 1097, 1096,
     1095,  177,  187,  190,  194,  148,  188,  181, 1075,   76,
     1068,  200,  203,  204,  205, 1059, 1042, 1944, 1023, 1019,

     1944, 1944, 1944, 1029, 1944, 1018, 1007,  206,  208,  215,
      216,  233, 1007,  207,  209,  985,  983,  982,  218,  981,
      217,  960, 1944, 1944,  954,  223,  239,  240,  241,  248,
      249,  242,  950,  928, 1944,  910,  925,  250,  252,  256,
      920,  258,  259,  265,  260,  886,  897,  266,  270,  272,
      273,  279,  293,  281,  876,  871,  280,  283,  300,  301,
      307,  303,  302,  848,  868,  309,  311,  313,  315,  321,
      325,  317,  845,  847,  330,  331,  332,  334,  340,  357,
      322,  830,  836,  341,  342,  348,  363,  364,  366,  370,
      794,  812,  372,  373,  374,  376,  382,  386,  375, 1944,

      811,  392,  393,  394,  400,  401,  419,  810,  790,  402,
      403,  409,  410,  425,  427,  783,  429,  431,  433,  435,
      439,  443,  779,  449,  450,  451,  452,  458,  476,  757,
      459,  460,  462,  466,  482,  484,  755,  486,  488,  490,
      492,  496,  500,  754,  506,  507,  508,  509,  515,  533,
      753,  516,  517,  519,  523,  539,  541,  733,  543,  545,
      547,  549,  553,  557,  726,  563,  564,  565,  566,  572,
      590,  722,  573,  574,  576,  580,  596,  598,  700,  600,
      602,  604,  606,  610,  614,  698,  620,  621,  622,  623,
      629,  647,  697,  630,  631,  633,  637,  653,  655,  696,

      657,  659,  661,  663,  667,  671,  676,  677,  678,  679,
      680,  686,  704,  669,  687,  688,  690,  694,  710,  712,
      665,  714,  716,  718,  720,  724,  728,  643,  734,  735,
      736,  737,  743,  761,  641,  744,  745,  747,  751,  767,
      769,  640,  771,  773,  775,  777,  781,  785,  639,  791,
      792,  793,  794,  800,  818,  619,  801,  802,  804,  808,
      824,  826,  612,  828,  830,  832,  834,  838,  842,  608,
      848,  849,  850,  851,  857,  875,  586,  858,  859,  861,
      865,  881,  883,  584,  885,  887,  889,  891,  895,  899,
      583,  905,  906,  907,  908,  914,  932,  582,  915,  916,

      918,  922,  938,  940,  562,  942,  944,  946,  948,  952,
      956,  555,  962,  963,  964,  965,  971,  989,  551,  972,
      973,  975,  979,  995,  997,  529,  999, 1001, 1003, 1005,
     1009, 1013,  527, 1019, 1020, 1021, 1022, 1028, 1046,  526,
     1029, 1030, 1032, 1036, 1052, 1054,  525, 1056, 1058, 1060,
     1062, 1066, 1070,  505, 1076, 1077, 1078, 1079, 1085, 1103,
      498, 1086, 1087, 1089, 1093, 1109, 1111,  494, 1113, 1115,
     1117, 1119, 1123, 1127,  472, 1133, 1134, 1135, 1136, 1142,
     1160,  470, 1143, 1144, 1146, 1150, 1166, 1168,  469, 1170,
     1172, 1174, 1176, 1180, 1184,  468, 1190, 1191, 1192, 1193,

     1199, 1217,  448, 1200, 1201, 1203, 1207, 1223, 1225,  441,
     1227, 1229, 1231, 1233, 1237, 1241,  437, 1247, 1248, 1249,
     1250, 1256, 1274,  413, 1257, 1258, 1260, 1264, 1280, 1282,
      412, 1284, 1286, 1288, 1290, 1294, 1298,  411, 1304, 1305,
     1306, 1307, 1313, 1331,  391, 1314, 1315, 1317, 1321, 1337,
     1339,  384, 1341, 1343, 1345, 1347, 1351, 1355,  383, 1361,
     1362, 1363, 1364, 1370, 1388,  352, 1371, 1372, 1374, 1378,
     1394, 1396,  351, 1398, 1400, 1402, 1404, 1408, 1412,  350,
     1418, 1419, 1420, 1421, 1427, 1445,  349, 1428, 1429, 1431,
     1435, 1451, 1453,  323, 1455, 1457, 1459, 1461, 1465, 1469,

      289, 1475, 1476, 1477, 1478, 1484, 1502,  287, 1485, 1486,
     1488, 1492, 1508, 1510,  286, 1512, 1514, 1516, 1518, 1522,
     1526,  225, 1532, 1533, 1534, 1535, 1541, 1559,  179, 1542,
     1543, 1545, 1549, 1565, 1567,  166, 1569, 1571, 1573, 1575,
     1579, 1583,  160, 1589, 1590, 1591, 1592, 1598, 1616,  130,
     1599, 1600, 1602, 1606, 1622, 1624, 1944, 1631, 1634, 1637,
     1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 1664, 1667,
     1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691, 1694, 1697,
     1700, 1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 1727,
     1730, 1733, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 1757,

     1760, 1763, 1766, 1769, 1772, 1775, 1778, 1781, 1784, 1787,
     1790, 1793, 1796, 1799, 1802, 1805, 1808, 1811, 1814, 1817,
     1820, 1823, 1826, 1829, 1832, 1835, 1838, 1841, 1844, 1847,
     1850, 1853, 1856, 1859, 1862, 1865, 1868, 1871, 1874, 1877,
     1880, 1883, 1886, 1889, 1892, 1895, 1898, 1901, 1904, 1907,
     1910, 1913, 1916, 1919, 1922, 1925, 1928, 1931, 1934, 1937,
     1940
    } ;

static const flex_int16_t yy_def[762] =
    {   0,
      657,    1,  657,    3,  657,  657,  657,  657,  657,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      659,  659,  660,  660,   24,   24,   24,   24,   24,   24,
       24,   24,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  661,  662,
      662,  661,  661,  662,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  663,  659,
      659,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  657,  658,  657,  657,  657,

      657,  657,  657,  657,  657,  664,  662,  664,  664,  664,
      664,  665,  664,  664,  664,  664,  664,  664,  664,  664,
      657,  657,  657,  657,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  657,  657,  667,  667,  667,  667,
      662,  667,  667,  667,  667,  657,  668,  668,  668,  668,
      668,  668,  669,  668,  657,  670,  670,  670,  670,  670,
      670,  670,  670,  657,  671,  671,  671,  671,  671,  671,
      671,  671,  657,  672,  672,  672,  672,  672,  672,  673,
      672,  657,  674,  674,  674,  674,  674,  674,  674,  674,
      657,  675,  675,  675,  675,  675,  675,  675,  675,  657,

      676,  676,  676,  676,  676,  676,  677,  676,  678,  678,
      678,  678,  678,  678,  678,  679,  679,  679,  679,  679,
      679,  679,  680,  680,  680,  680,  680,  680,  681,  682,
      682,  682,  682,  682,  682,  682,  683,  683,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  684,  684,  685,
      686,  686,  686,  686,  686,  686,  686,  687,  687,  687,
      687,  687,  687,  687,  688,  688,  688,  688,  688,  688,
      689,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  691,  691,  692,  692,  692,  692,  692,
      692,  693,  694,  694,  694,  694,  694,  694,  694,  695,

      695,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  696,  697,  698,  698,  698,  698,  698,  698,  698,
      699,  699,  699,  699,  699,  699,  699,  700,  700,  700,
      700,  700,  700,  701,  702,  702,  702,  702,  702,  702,
      702,  703,  703,  703,  703,  703,  703,  703,  704,  704,
      704,  704,  704,  704,  705,  706,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  707,  708,
      708,  708,  708,  708,  708,  709,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      712,  712,  712,  712,  712,  712,  713,  714,  714,  714,

      714,  714,  714,  714,  715,  715,  715,  715,  715,  715,
      715,  716,  716,  716,  716,  716,  716,  717,  718,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  721,  722,
      722,  722,  722,  722,  722,  722,  723,  723,  723,  723,
      723,  723,  723,  724,  724,  724,  724,  724,  724,  725,
      726,  726,  726,  726,  726,  726,  726,  727,  727,  727,
      727,  727,  727,  727,  728,  728,  728,  728,  728,  728,
      729,  730,  730,  730,  730,  730,  730,  730,  731,  731,
      731,  731,  731,  731,  731,  732,  732,  732,  732,  732,

      732,  733,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  736,  737,  738,  738,  738,  738,  738,  738,  738,
      739,  739,  739,  739,  739,  739,  739,  740,  740,  740,
      740,  740,  740,  741,  742,  742,  742,  742,  742,  742,
      742,  743,  743,  743,  743,  743,  743,  743,  744,  744,
      744,  744,  744,  744,  745,  746,  746,  746,  746,  746,
      746,  746,  747,  747,  747,  747,  747,  747,  747,  748,
      748,  748,  748,  748,  748,  749,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,  751,  751,  751,  751,

      752,  752,  752,  752,  752,  752,  753,  754,  754,  754,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  755,
      755,  756,  756,  756,  756,  756,  756,  757,  758,  758,
      758,  758,  758,  758,  758,  759,  759,  759,  759,  759,
      759,  759,  760,  760,  760,  760,  760,  760,  761,  657,
      657,  657,  657,  657,  657,  657,    0,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657
    } ;

static const flex_int16_t yy_nxt[1972] =
    {   0,
        6,    7,    8,    7,    6,    6,    6,    9,   10,   11,
       12,   13,   14,   15,   15,   16,   15,   15,   15,   17,
       15,   15,   18,   19,   15,   15,   15,   20,   21,    8,
       21,   20,   20,   20,   22,   23,   24,   25,   26,   27,
       28,   28,   29,   28,   28,   28,   30,   28,   28,   31,
       32,   28,   28,   28,   33,   36,   36,   34,   36,   35,
       36,   36,   38,   36,   36,   36,   39,   41,   36,   51,
       45,   42,   52,   55,   53,   59,   40,   43,   50,   60,
       55,   58,   44,   55,   63,   46,  116,   47,   55,   62,
       61,   48,   49,   49,   54,   49,   49,   49,   49,   49,

       55,   56,   49,   49,   54,   49,   49,   49,   49,   49,
       64,   55,   33,   68,   57,   34,   68,   35,   68,   68,
       65,   68,   69,   70,   66,   68,   68,   68,   71,   74,
       72,   68,   50,   68,   50,   50,   77,   73,   75,   82,
       85,   50,   51,   76,   78,   83,   85,   84,   50,   50,
       50,   50,   50,   85,   85,   86,   85,   85,   50,   67,
       87,   50,   50,   85,   88,  113,   85,   89,   50,   50,
       91,   50,   50,   90,   85,   50,   85,   85,   96,   50,
       85,   50,   94,   50,  108,   92,   97,   97,   97,   50,
       50,   95,   51,   93,  108,  110,   50,  111,  112,  112,

      112,  115,   50,  109,  114,   50,   50,   50,   50,   50,
       50,   50,  117,  126,  120,  128,  119,   50,   51,  135,
       50,  129,  126,  130,  121,   50,  132,   50,  118,  134,
      138,  133,  127,  125,  125,   54,  125,  125,  125,  125,
      125,   50,  141,   50,   50,  145,  140,  140,  138,  139,
       51,   50,   50,  142,   50,  143,  144,  148,  141,  150,
       50,   51,   50,  150,  151,  148,  152,   50,   50,  153,
      153,  153,   50,  157,  141,   50,  149,  159,  154,  159,
      157,   51,   50,   50,  160,   50,  161,  166,   50,   50,
      168,   50,  158,  156,  156,   54,  156,  156,  156,  156,

      156,  163,  141,   50,   50,   50,  167,  168,  166,   51,
      171,   50,  169,   50,  170,  141,  175,   50,  177,   50,
      177,  172,  175,   51,   50,   50,  178,   50,  179,  180,
      180,  180,   50,   50,  141,  176,   50,  184,  186,  186,
      181,  184,   51,   50,   50,  187,  190,  188,  193,  195,
      141,   50,   50,   50,   50,  195,  185,  183,  183,   54,
      183,  183,  183,  183,  183,   50,   51,  194,   50,  196,
      193,  197,   50,  198,   50,   50,  141,   50,   50,  202,
      204,  204,  199,  202,   51,   50,   50,  205,   50,  206,
      207,  207,  207,   50,   50,   50,  141,  208,  203,  210,

      212,  212,   50,   51,   50,   50,  213,  210,  214,  217,
      219,  141,   50,   50,   50,   50,  219,  217,  211,  209,
      209,   54,  209,  209,  209,  209,  209,   51,  218,   50,
      220,   50,  221,   50,  222,  141,  224,   50,  226,   50,
      226,   51,  224,   50,  227,   50,  228,  229,  229,  229,
       50,   50,   50,  141,   50,  225,  231,  233,  233,  231,
       51,   50,   50,  234,  141,  235,  238,  240,   50,  240,
       50,   50,   50,  238,   50,  232,  230,  230,   54,  230,
      230,  230,  230,  230,   51,  239,   50,  241,   50,  242,
       50,  243,  141,  245,   50,  247,   50,  247,   51,  245,

       50,  248,   50,  249,  250,  250,  250,   50,   50,   50,
      141,   50,  246,  252,  254,  254,  252,   51,   50,   50,
      255,  141,  256,  259,  261,   50,  261,   50,   50,   50,
      259,   50,  253,  251,  251,   54,  251,  251,  251,  251,
      251,   51,  260,   50,  262,   50,  263,   50,  264,  141,
      266,   50,  268,   50,  268,   51,  266,   50,  269,   50,
      270,  271,  271,  271,   50,   50,   50,  141,   50,  267,
      273,  275,  275,  273,   51,   50,   50,  276,  141,  277,
      280,  282,   50,  282,   50,   50,   50,  280,   50,  274,
      272,  272,   54,  272,  272,  272,  272,  272,   51,  281,

       50,  283,   50,  284,   50,  285,  141,  287,   50,  289,
       50,  289,   51,  287,   50,  290,   50,  291,  292,  292,
      292,   50,   50,   50,  141,   50,  288,  294,  296,  296,
      294,   51,   50,   50,  297,  141,  298,  301,  303,   50,
      303,   50,   50,   50,  301,   50,  295,  293,  293,   54,
      293,  293,  293,  293,  293,   51,  302,   50,  304,   50,
      305,   50,  306,  141,  308,   50,  310,   50,  310,   51,
      308,   50,  311,   50,  312,  313,  313,  313,   50,   50,
       50,  141,   50,  309,  315,  317,  317,  315,   51,   50,
       50,  318,  141,  319,  322,  324,   50,  324,   50,   50,

       50,  322,   50,  316,  314,  314,   54,  314,  314,  314,
      314,  314,   51,  323,   50,  325,   50,  326,   50,  327,
      141,  329,   50,  331,   50,  331,   51,  329,   50,  332,
       50,  333,  334,  334,  334,   50,   50,   50,  141,   50,
      330,  336,  338,  338,  336,   51,   50,   50,  339,  141,
      340,  343,  345,   50,  345,   50,   50,   50,  343,   50,
      337,  335,  335,   54,  335,  335,  335,  335,  335,   51,
      344,   50,  346,   50,  347,   50,  348,  141,  350,   50,
      352,   50,  352,   51,  350,   50,  353,   50,  354,  355,
      355,  355,   50,   50,   50,  141,   50,  351,  357,  359,

      359,  357,   51,   50,   50,  360,  141,  361,  364,  366,
       50,  366,   50,   50,   50,  364,  200,  358,  356,  356,
       54,  356,  356,  356,  356,  356,   51,  365,   50,  367,
       50,  368,   50,  369,  141,  371,   50,  373,   50,  373,
       51,  371,  191,  374,   50,  375,  376,  376,  376,   50,
       50,   50,  141,   50,  372,  378,  380,  380,  378,   51,
       50,   50,  381,  141,  382,  385,  387,   50,  387,  182,
       50,  173,  385,   50,  379,  377,  377,   54,  377,  377,
      377,  377,  377,   51,  386,   50,  388,   50,  389,   50,
      390,  141,  392,   50,  394,  164,  394,   51,  392,   50,

      395,   50,  396,  397,  397,  397,  155,   50,   50,  141,
       50,  393,  399,  401,  401,  399,   51,   50,   50,  402,
      141,  403,  406,  408,   50,  408,   81,   50,  146,  406,
       50,  400,  398,  398,   54,  398,  398,  398,  398,  398,
       51,  407,   50,  409,   50,  410,   50,  411,  141,  413,
       50,  415,   50,  415,   51,  413,   50,  416,   50,  417,
      418,  418,  418,  136,   50,   50,  141,   50,  414,  420,
      422,  422,  420,   51,   50,   50,  423,  141,  424,  427,
      429,   50,  429,   50,   50,   50,  427,   50,  421,  419,
      419,   54,  419,  419,  419,  419,  419,   51,  428,   50,

      430,   50,  431,   50,  432,  141,  434,   50,  436,   50,
      436,   51,  434,   81,  437,   50,  438,  439,  439,  439,
       50,   50,   50,  141,   50,  435,  441,  443,  443,  441,
       51,   50,   50,  444,  141,  445,  448,  450,   50,  450,
      124,  123,  122,  448,   36,  442,  440,  440,   54,  440,
      440,  440,  440,  440,   51,  449,   50,  451,   50,  452,
       50,  453,  141,  455,   50,  457,  121,  457,   51,  455,
       50,  458,   50,  459,  460,  460,  460,   50,   50,   50,
      141,   50,  456,  462,  464,  464,  462,   51,   50,   50,
      465,  141,  466,  469,  471,   50,  471,  107,   50,   50,

      469,  105,  463,  461,  461,   54,  461,  461,  461,  461,
      461,   51,  470,   50,  472,   50,  473,   50,  474,  141,
      476,   50,  478,  104,  478,   51,  476,  103,  479,   50,
      480,  481,  481,  481,  102,   50,   50,  141,   50,  477,
      483,  485,  485,  483,   51,   50,   50,  486,  141,  487,
      490,  492,   50,  492,  101,  100,   99,  490,   98,  484,
      482,  482,   54,  482,  482,  482,  482,  482,   51,  491,
       50,  493,   50,  494,   50,  495,  141,  497,   50,  499,
       81,  499,   51,  497,   81,  500,   50,  501,  502,  502,
      502,   81,   50,   50,  141,   50,  498,  504,  506,  506,

      504,   51,   50,   50,  507,  141,  508,  511,  513,   50,
      513,   50,   68,   68,  511,   67,  505,  503,  503,   54,
      503,  503,  503,  503,  503,   51,  512,   50,  514,   50,
      515,   50,  516,  141,  518,   50,  520,   55,  520,   51,
      518,   50,  521,   50,  522,  523,  523,  523,   50,   50,
       50,  141,   50,  519,  525,  527,  527,  525,   51,   50,
       50,  528,  141,  529,  532,  534,   50,  534,   36,  657,
      657,  532,  657,  526,  524,  524,   54,  524,  524,  524,
      524,  524,   51,  533,   50,  535,   50,  536,   50,  537,
      141,  539,   50,  541,  657,  541,   51,  539,  657,  542,

       50,  543,  544,  544,  544,  657,   50,   50,  141,   50,
      540,  546,  548,  548,  546,   51,   50,   50,  549,  141,
      550,  553,  555,   50,  555,  657,  657,  657,  553,  657,
      547,  545,  545,   54,  545,  545,  545,  545,  545,   51,
      554,   50,  556,   50,  557,   50,  558,  141,  560,   50,
      562,  657,  562,   51,  560,  657,  563,   50,  564,  565,
      565,  565,  657,   50,   50,  141,   50,  561,  567,  569,
      569,  567,   51,   50,   50,  570,  141,  571,  574,  576,
       50,  576,  657,  657,  657,  574,  657,  568,  566,  566,
       54,  566,  566,  566,  566,  566,   51,  575,   50,  577,

       50,  578,   50,  579,  141,  581,   50,  583,  657,  583,
       51,  581,  657,  584,   50,  585,  586,  586,  586,  657,
       50,   50,  141,   50,  582,  588,  590,  590,  588,   51,
       50,   50,  591,  141,  592,  595,  597,   50,  597,  657,
      657,  657,  595,  657,  589,  587,  587,   54,  587,  587,
      587,  587,  587,   51,  596,   50,  598,   50,  599,   50,
      600,  141,  602,   50,  604,  657,  604,   51,  602,  657,
      605,   50,  606,  607,  607,  607,  657,   50,   50,  141,
       50,  603,  609,  611,  611,  609,   51,   50,   50,  612,
      141,  613,  616,  618,   50,  618,  657,  657,  657,  616,

      657,  610,  608,  608,   54,  608,  608,  608,  608,  608,
       51,  617,   50,  619,   50,  620,   50,  621,  141,  623,
       50,  625,  657,  625,   51,  623,  657,  626,   50,  627,
      628,  628,  628,  657,   50,   50,  141,   50,  624,  630,
      632,  632,  630,   51,   50,   50,  633,  141,  634,  637,
      639,   50,  639,  657,  657,  657,  637,  657,  631,  629,
      629,   54,  629,  629,  629,  629,  629,   51,  638,   50,
      640,   50,  641,   50,  642,  141,  644,   50,  646,  657,
      646,   51,  644,  657,  647,   50,  648,  649,  649,  649,
      657,   50,   50,  141,   50,  645,  651,  653,  653,  651,

       51,   50,   50,  654,  141,  655,   67,  121,   50,  121,
      657,  657,  657,   67,  657,  652,  650,  650,   54,  650,
      650,  650,  650,  650,   51,   96,   50,   34,  657,   35,
      657,   68,   37,   37,   49,   49,   49,   55,   55,   55,
       79,   79,   79,   80,  657,   80,  106,  106,  106,  125,
      125,  125,  131,  131,  131,  137,  137,  137,  147,  147,
      147,  156,  156,  156,  162,  162,  162,  165,  165,  165,
      174,  174,  174,  183,  183,  183,  189,  189,  189,  192,
      192,  192,  201,  201,  201,  209,  209,  209,  215,  215,
      215,  216,  216,  216,  223,  223,  223,  230,  230,  230,

      236,  236,  236,  237,  237,  237,  244,  244,  244,  251,
      251,  251,  257,  257,  257,  258,  258,  258,  265,  265,
      265,  272,  272,  272,  278,  278,  278,  279,  279,  279,
      286,  286,  286,  293,  293,  293,  299,  299,  299,  300,
      300,  300,  307,  307,  307,  314,  314,  314,  320,  320,
      320,  321,  321,  321,  328,  328,  328,  335,  335,  335,
      341,  341,  341,  342,  342,  342,  349,  349,  349,  356,
      356,  356,  362,  362,  362,  363,  363,  363,  370,  370,
      370,  377,  377,  377,  383,  383,  383,  384,  384,  384,
      391,  391,  391,  398,  398,  398,  404,  404,  404,  405,

      405,  405,  412,  412,  412,  419,  419,  419,  425,  425,
      425,  426,  426,  426,  433,  433,  433,  440,  440,  440,
      446,  446,  446,  447,  447,  447,  454,  454,  454,  461,
      461,  461,  467,  467,  467,  468,  468,  468,  475,  475,
      475,  482,  482,  482,  488,  488,  488,  489,  489,  489,
      496,  496,  496,  503,  503,  503,  509,  509,  509,  510,
      510,  510,  517,  517,  517,  524,  524,  524,  530,  530,
      530,  531,  531,  531,  538,  538,  538,  545,  545,  545,
      551,  551,  551,  552,  552,  552,  559,  559,  559,  566,
      566,  566,  572,  572,  572,  573,  573,  573,  580,  580,

      580,  587,  587,  587,  593,  593,  593,  594,  594,  594,
      601,  601,  601,  608,  608,  608,  614,  614,  614,  615,
      615,  615,  622,  622,  622,  629,  629,  629,  635,  635,
      635,  636,  636,  636,  643,  643,  643,  650,  650,  650,
      656,  656,  656,    5,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657
    } ;

static const flex_int16_t yy_chk[1972] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    9,   10,   11,    9,   12,    9,
       14,   13,   10,   16,   17,   18,   11,   13,   19,   22,
       17,   13,   22,   25,   22,   26,   12,   14,   90,   26,
       29,   25,   16,   27,   30,   18,   90,   19,   30,   29,
       27,   19,   23,   23,   23,   23,   23,   23,   23,   23,

       31,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       31,   32,   35,   38,   24,   35,   39,   35,   40,   41,
       32,   42,   38,   39,   32,   43,   46,   45,   40,   43,
       41,   47,  650,   48,   52,   55,   47,   42,   45,   52,
       55,   56,   53,   46,   48,   53,   56,   53,   57,   58,
       86,   59,   60,   57,   58,   56,   59,   60,   62,   67,
       57,   61,  643,   62,   58,   86,   61,   59,  636,   63,
       61,   64,   65,   60,   63,   66,   64,   65,   67,   82,
       66,  629,   65,   88,   82,   63,   68,   68,   68,   83,
       87,   66,   84,   64,   83,   84,   85,   84,   85,   85,

       85,   88,   92,   82,   87,   93,   94,   95,  108,  114,
      109,  115,   92,  108,   95,  109,   94,  110,  111,  121,
      119,  111,  110,  111,  121,  126,  114,  622,   93,  119,
      126,  115,  108,  112,  112,  112,  112,  112,  112,  112,
      112,  127,  128,  129,  132,  132,  127,  128,  129,  126,
      130,  131,  138,  130,  139,  130,  131,  138,  140,  139,
      142,  143,  145,  140,  143,  142,  143,  144,  148,  144,
      144,  144,  149,  148,  150,  151,  138,  149,  145,  150,
      151,  152,  157,  154,  152,  158,  152,  157,  615,  608,
      158,  601,  148,  153,  153,  153,  153,  153,  153,  153,

      153,  154,  159,  160,  163,  162,  157,  159,  160,  161,
      162,  166,  161,  167,  161,  168,  166,  169,  167,  172,
      168,  163,  169,  170,  181,  594,  170,  171,  170,  171,
      171,  171,  175,  176,  177,  166,  178,  175,  176,  177,
      172,  178,  179,  184,  185,  179,  181,  179,  184,  185,
      186,  587,  580,  573,  566,  186,  175,  180,  180,  180,
      180,  180,  180,  180,  180,  187,  188,  184,  189,  188,
      187,  188,  190,  189,  193,  194,  195,  199,  196,  193,
      194,  195,  190,  196,  197,  559,  552,  197,  198,  197,
      198,  198,  198,  545,  202,  203,  204,  199,  193,  202,

      203,  204,  205,  206,  210,  211,  206,  205,  206,  210,
      211,  212,  213,  538,  531,  524,  212,  213,  202,  207,
      207,  207,  207,  207,  207,  207,  207,  214,  210,  215,
      214,  217,  214,  218,  215,  219,  217,  220,  218,  517,
      219,  221,  220,  510,  221,  222,  221,  222,  222,  222,
      503,  224,  225,  226,  227,  217,  224,  225,  226,  227,
      228,  231,  232,  228,  233,  228,  231,  232,  234,  233,
      496,  489,  482,  234,  475,  224,  229,  229,  229,  229,
      229,  229,  229,  229,  235,  231,  236,  235,  238,  235,
      239,  236,  240,  238,  241,  239,  468,  240,  242,  241,

      461,  242,  243,  242,  243,  243,  243,  454,  245,  246,
      247,  248,  238,  245,  246,  247,  248,  249,  252,  253,
      249,  254,  249,  252,  253,  255,  254,  447,  440,  433,
      255,  426,  245,  250,  250,  250,  250,  250,  250,  250,
      250,  256,  252,  257,  256,  259,  256,  260,  257,  261,
      259,  262,  260,  419,  261,  263,  262,  412,  263,  264,
      263,  264,  264,  264,  405,  266,  267,  268,  269,  259,
      266,  267,  268,  269,  270,  273,  274,  270,  275,  270,
      273,  274,  276,  275,  398,  391,  384,  276,  377,  266,
      271,  271,  271,  271,  271,  271,  271,  271,  277,  273,

      278,  277,  280,  277,  281,  278,  282,  280,  283,  281,
      370,  282,  284,  283,  363,  284,  285,  284,  285,  285,
      285,  356,  287,  288,  289,  290,  280,  287,  288,  289,
      290,  291,  294,  295,  291,  296,  291,  294,  295,  297,
      296,  349,  342,  335,  297,  328,  287,  292,  292,  292,
      292,  292,  292,  292,  292,  298,  294,  299,  298,  301,
      298,  302,  299,  303,  301,  304,  302,  321,  303,  305,
      304,  314,  305,  306,  305,  306,  306,  306,  307,  308,
      309,  310,  311,  301,  308,  309,  310,  311,  312,  315,
      316,  312,  317,  312,  315,  316,  318,  317,  300,  293,

      286,  318,  279,  308,  313,  313,  313,  313,  313,  313,
      313,  313,  319,  315,  320,  319,  322,  319,  323,  320,
      324,  322,  325,  323,  272,  324,  326,  325,  265,  326,
      327,  326,  327,  327,  327,  258,  329,  330,  331,  332,
      322,  329,  330,  331,  332,  333,  336,  337,  333,  338,
      333,  336,  337,  339,  338,  251,  244,  237,  339,  230,
      329,  334,  334,  334,  334,  334,  334,  334,  334,  340,
      336,  341,  340,  343,  340,  344,  341,  345,  343,  346,
      344,  223,  345,  347,  346,  216,  347,  348,  347,  348,
      348,  348,  209,  350,  351,  352,  353,  343,  350,  351,

      352,  353,  354,  357,  358,  354,  359,  354,  357,  358,
      360,  359,  208,  201,  192,  360,  191,  350,  355,  355,
      355,  355,  355,  355,  355,  355,  361,  357,  362,  361,
      364,  361,  365,  362,  366,  364,  367,  365,  183,  366,
      368,  367,  182,  368,  369,  368,  369,  369,  369,  174,
      371,  372,  373,  374,  364,  371,  372,  373,  374,  375,
      378,  379,  375,  380,  375,  378,  379,  381,  380,  173,
      165,  164,  381,  156,  371,  376,  376,  376,  376,  376,
      376,  376,  376,  382,  378,  383,  382,  385,  382,  386,
      383,  387,  385,  388,  386,  155,  387,  389,  388,  147,

      389,  390,  389,  390,  390,  390,  146,  392,  393,  394,
      395,  385,  392,  393,  394,  395,  396,  399,  400,  396,
      401,  396,  399,  400,  402,  401,  141,  137,  136,  402,
      134,  392,  397,  397,  397,  397,  397,  397,  397,  397,
      403,  399,  404,  403,  406,  403,  407,  404,  408,  406,
      409,  407,  133,  408,  410,  409,  125,  410,  411,  410,
      411,  411,  411,  122,  413,  414,  415,  416,  406,  413,
      414,  415,  416,  417,  420,  421,  417,  422,  417,  420,
      421,  423,  422,  120,  118,  117,  423,  116,  413,  418,
      418,  418,  418,  418,  418,  418,  418,  424,  420,  425,

      424,  427,  424,  428,  425,  429,  427,  430,  428,  113,
      429,  431,  430,  107,  431,  432,  431,  432,  432,  432,
      106,  434,  435,  436,  437,  427,  434,  435,  436,  437,
      438,  441,  442,  438,  443,  438,  441,  442,  444,  443,
      104,  100,   99,  444,   97,  434,  439,  439,  439,  439,
      439,  439,  439,  439,  445,  441,  446,  445,  448,  445,
      449,  446,  450,  448,  451,  449,   96,  450,  452,  451,
       91,  452,  453,  452,  453,  453,  453,   89,  455,  456,
      457,  458,  448,  455,  456,  457,  458,  459,  462,  463,
      459,  464,  459,  462,  463,  465,  464,   81,   80,   79,

      465,   78,  455,  460,  460,  460,  460,  460,  460,  460,
      460,  466,  462,  467,  466,  469,  466,  470,  467,  471,
      469,  472,  470,   77,  471,  473,  472,   76,  473,  474,
      473,  474,  474,  474,   75,  476,  477,  478,  479,  469,
      476,  477,  478,  479,  480,  483,  484,  480,  485,  480,
      483,  484,  486,  485,   73,   71,   70,  486,   69,  476,
      481,  481,  481,  481,  481,  481,  481,  481,  487,  483,
      488,  487,  490,  487,  491,  488,  492,  490,  493,  491,
       54,  492,  494,  493,   51,  494,  495,  494,  495,  495,
      495,   50,  497,  498,  499,  500,  490,  497,  498,  499,

      500,  501,  504,  505,  501,  506,  501,  504,  505,  507,
      506,   49,   44,   37,  507,   34,  497,  502,  502,  502,
      502,  502,  502,  502,  502,  508,  504,  509,  508,  511,
      508,  512,  509,  513,  511,  514,  512,   28,  513,  515,
      514,   21,  515,  516,  515,  516,  516,  516,   20,  518,
      519,  520,  521,  511,  518,  519,  520,  521,  522,  525,
      526,  522,  527,  522,  525,  526,  528,  527,   15,    5,
        0,  528,    0,  518,  523,  523,  523,  523,  523,  523,
      523,  523,  529,  525,  530,  529,  532,  529,  533,  530,
      534,  532,  535,  533,    0,  534,  536,  535,    0,  536,

      537,  536,  537,  537,  537,    0,  539,  540,  541,  542,
      532,  539,  540,  541,  542,  543,  546,  547,  543,  548,
      543,  546,  547,  549,  548,    0,    0,    0,  549,    0,
      539,  544,  544,  544,  544,  544,  544,  544,  544,  550,
      546,  551,  550,  553,  550,  554,  551,  555,  553,  556,
      554,    0,  555,  557,  556,    0,  557,  558,  557,  558,
      558,  558,    0,  560,  561,  562,  563,  553,  560,  561,
      562,  563,  564,  567,  568,  564,  569,  564,  567,  568,
      570,  569,    0,    0,    0,  570,    0,  560,  565,  565,
      565,  565,  565,  565,  565,  565,  571,  567,  572,  571,

      574,  571,  575,  572,  576,  574,  577,  575,    0,  576,
      578,  577,    0,  578,  579,  578,  579,  579,  579,    0,
      581,  582,  583,  584,  574,  581,  582,  583,  584,  585,
      588,  589,  585,  590,  585,  588,  589,  591,  590,    0,
        0,    0,  591,    0,  581,  586,  586,  586,  586,  586,
      586,  586,  586,  592,  588,  593,  592,  595,  592,  596,
      593,  597,  595,  598,  596,    0,  597,  599,  598,    0,
      599,  600,  599,  600,  600,  600,    0,  602,  603,  604,
      605,  595,  602,  603,  604,  605,  606,  609,  610,  606,
      611,  606,  609,  610,  612,  611,    0,    0,    0,  612,

        0,  602,  607,  607,  607,  607,  607,  607,  607,  607,
      613,  609,  614,  613,  616,  613,  617,  614,  618,  616,
      619,  617,    0,  618,  620,  619,    0,  620,  621,  620,
      621,  621,  621,    0,  623,  624,  625,  626,  616,  623,
      624,  625,  626,  627,  630,  631,  627,  632,  627,  630,
      631,  633,  632,    0,    0,    0,  633,    0,  623,  628,
      628,  628,  628,  628,  628,  628,  628,  634,  630,  635,
      634,  637,  634,  638,  635,  639,  637,  640,  638,    0,
      639,  641,  640,    0,  641,  642,  641,  642,  642,  642,
        0,  644,  645,  646,  647,  637,  644,  645,  646,  647,

      648,  651,  652,  648,  653,  648,  651,  652,  654,  653,
        0,    0,    0,  654,    0,  644,  649,  649,  649,  649,
      649,  649,  649,  649,  655,  651,  656,  655,    0,  655,
        0,  656,  658,  658,  659,  659,  659,  660,  660,  660,
      661,  661,  661,  662,    0,  662,  663,  663,  663,  664,
      664,  664,  665,  665,  665,  666,  666,  666,  667,  667,
      667,  668,  668,  668,  669,  669,  669,  670,  670,  670,
      671,  671,  671,  672,  672,  672,  673,  673,  673,  674,
      674,  674,  675,  675,  675,  676,  676,  676,  677,  677,
      677,  678,  678,  678,  679,  679,  679,  680,  680,  680,

      681,  681,  681,  682,  682,  682,  683,  683,  683,  684,
      684,  684,  685,  685,  685,  686,  686,  686,  687,  687,
      687,  688,  688,  688,  689,  689,  689,  690,  690,  690,
      691,  691,  691,  692,  692,  692,  693,  693,  693,  694,
      694,  694,  695,  695,  695,  696,  696,  696,  697,  697,
      697,  698,  698,  698,  699,  699,  699,  700,  700,  700,
      701,  701,  701,  702,  702,  702,  703,  703,  703,  704,
      704,  704,  705,  705,  705,  706,  706,  706,  707,  707,
      707,  708,  708,  708,  709,  709,  709,  710,  710,  710,
      711,  711,  711,  712,  712,  712,  713,  713,  713,  714,

      714,  714,  715,  715,  715,  716,  716,  716,  717,  717,
      717,  718,  718,  718,  719,  719,  719,  720,  720,  720,
      721,  721,  721,  722,  722,  722,  723,  723,  723,  724,
      724,  724,  725,  725,  725,  726,  726,  726,  727,  727,
      727,  728,  728,  728,  729,  729,  729,  730,  730,  730,
      731,  731,  731,  732,  732,  732,  733,  733,  733,  734,
      734,  734,  735,  735,  735,  736,  736,  736,  737,  737,
      737,  738,  738,  738,  739,  739,  739,  740,  740,  740,
      741,  741,  741,  742,  742,  742,  743,  743,  743,  744,
      744,  744,  745,  745,  745,  746,  746,  746,  747,  747,

      747,  748,  748,  748,  749,  749,  749,  750,  750,  750,
      751,  751,  751,  752,  752,  752,  753,  753,  753,  754,
      754,  754,  755,  755,  755,  756,  756,  756,  757,  757,
      757,  758,  758,  758,  759,  759,  759,  760,  760,  760,
      761,  761,  761,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[20] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "test.l"
#line 2 "test.l"
    #include <stdio.h>
    #include <string.h>

    extern int yylex();
    extern int yylineno;
    extern char* yytext;
#line 1095 "lex.yy.cc"
/* Generate a C++ lexer */
/* track line numbers*/
/* Character classes */
/* Lexer states */

#line 1101 "lex.yy.cc"

#define INITIAL 0
#define multiline 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "test.l"

#line 1236 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 658 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1944 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 29 "test.l"
{ ; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "test.l"
{ ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "test.l"
{ 
                                  printf("NAME:\n"); 
                              }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 34 "test.l"
{ 
                                  BEGIN(multiline);
                                  printf("DESC:\n"); 
                              }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 38 "test.l"
{ 
                                  printf("COLOR:\n"); 
                              }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 41 "test.l"
{ printf("SPEED:\n"); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 42 "test.l"
{ 
                                  printf("ABIL:\n"); 
                              }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "test.l"
{ printf("HP:\n"); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "test.l"
{ printf("DAM:\n"); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "test.l"
{ 
                                  printf("SYMB:\n"); 
                              }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 50 "test.l"
{ printf("RRTY:\n"); }
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 51 "test.l"
{ 
                                  BEGIN(0);
                                  printf("\t --- %s --- \n", yytext); 
                              }
	YY_BREAK
case 13:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 55 "test.l"
{ 
                                    printf("\t%s\n", yytext);
                                }
	YY_BREAK
case 14:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 58 "test.l"
{ 
                                  printf("\t%s\n", yytext);
                              }
	YY_BREAK
case 15:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 61 "test.l"
{ 
                                    printf("\t%d\n", atoi(yytext));
                                }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "test.l"
{;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 65 "test.l"
{;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 66 "test.l"
{;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "test.l"
ECHO;
	YY_BREAK
#line 1433 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multiline):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 658 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 658 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 657);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 67 "test.l"


int yywrap(void)
{
	return 1;			
}

int main (void) {
    int s = yylex();
    while(s) {
        yylex();
    }
}


